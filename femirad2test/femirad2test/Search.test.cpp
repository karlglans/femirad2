#include "gtest/gtest.h"
#include "../../logic/Search.h"

bool skipAll = false;

TEST(Searching_slowTest, slowTest_should_stop_3_line) {
  // there is an obvious best move
  Board board(16);
  char brd[] = {
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0, 2,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1, 0,2,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0 };
  board.setBoard(brd);
  SearchResult sr;
  Search search(7);
  search.doSearch(sr, 2, &board);
  EXPECT_EQ(sr.move, 136); // depth 5 => 135
}

TEST(Searching_slowTest, handle_bad_possition) {
  if (skipAll) { ASSERT_TRUE(true); return; }
  // should not just give up
  Board board(16);
  char brd[] = {
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,1,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0, 2,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,1, 0,2,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 1,0,2,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0, 0,0,0,0,0,0,0,0 };
  board.setBoard(brd);
  SearchResult sr;
  Search search(11);
  search.doSearch(sr, 2, &board);
  EXPECT_EQ(sr.move, 153); // depth 5 => 135
}

TEST(Searching_slowTest, finish_instead_of_stopping_opponent) {
  if (skipAll) { ASSERT_TRUE(true); return; }
  Board board(16);
  char brd[] = {
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,1,0,2,0,2,0,0,0,0,0,0,0,
    0,0,0,0,2,1,1,1,1,2,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0,2,0,1,0,0,0,0,0,
    0,0,0,0,0,0,1,1,0,2,0,0,0,0,0,0,
    0,0,0,0,0,0,1,0,2,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,2,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
    0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 };
  board.setBoard(brd);
  SearchResult sr;
  Search search(7);
  search.doSearch(sr, 1, &board);
  EXPECT_EQ(sr.move, 150);
}